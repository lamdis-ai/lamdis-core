name: core-build-publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: Optional semver tag to apply (e.g., v1.2.3). If set, also tags 'latest'.
        required: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  ORG: lamdis-ai

jobs:
  build-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: admin-api
            service: admin-api-service
          - name: connector
            service: connector-service
          - name: manifest
            service: manifest-service
          - name: policy
            service: policy-service
          - name: admin-ui
            service: admin-ui
            ui: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate version (format and uniqueness)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          VER='${{ inputs.version }}'
          if [ -z "$VER" ]; then
            echo "No version provided; will publish only sha-* tags."
            exit 0
          fi
          echo "Proposed version: $VER"
          # Basic semver-v prefixed validation: vMAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]
          if ! echo "$VER" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+([.-][0-9A-Za-z.-]+)?([+][0-9A-Za-z.-]+)?$'; then
            echo "::error::Version must be like v1.2.3 or v1.2.3-rc.1"; exit 1;
          fi
          PKG="lamdis-${{ matrix.name }}"
          ORG='${{ env.ORG }}'
          echo "Checking if $VER already exists in ghcr.io/$ORG/$PKG"
          # Query existing container versions and tags; if package doesn't exist yet, allow
          if gh api -H "Accept: application/vnd.github+json" \
              "/orgs/${ORG}/packages/container/${PKG}/versions?per_page=100" \
              | jq -r '.[].metadata.container.tags[]' | grep -Fx "$VER" >/dev/null 2>&1; then
            echo "::error::Tag $VER already exists for $PKG"; exit 1;
          else
            echo "Tag $VER is available for $PKG"
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.ORG }}/lamdis-${{ matrix.name }}
          tags: |
            # If a version input is provided on manual dispatch, tag with it and 'latest'
            type=raw,value=${{ inputs.version }},enable=${{ inputs.version != '' }}
            type=raw,value=latest,enable=${{ inputs.version != '' && !contains(inputs.version, '-') }}
            type=raw,value=sha-${{ github.sha }}

      - name: Build and push (Go services)
        if: matrix.ui != true
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile
          push: true
          build-args: |
            SERVICE=${{ matrix.service }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push (Admin UI)
        if: matrix.ui == true
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile.admin-ui
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
